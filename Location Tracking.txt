/**
 * Constant used in the location settings dialog.
 * The desired interval for location updates. Inexact. Updates may be more or less frequent.
 * The fastest rate for active location updates. Exact. Updates will never be more frequent than this value.
 */
private const val REQUEST_CHECK_SETTINGS = 0x1
private const val UPDATE_INTERVAL_IN_MILLISECONDS: Long = 10000
private const val FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS =
    UPDATE_INTERVAL_IN_MILLISECONDS / 2





 /**
     * Provides access to the Location Settings API.
     * Stores parameters for requests to the FusedLocationProviderApi.
     * Stores the types of location services the client is interested in using. Used for checking
       settings to determine if the device has optimal location settings.
     * Callback for Location events.
     * Tracks the status of the location updates request. Value changes when the user presses the
       map center is moved by scrolling it
     * Time when the location was updated represented as a String.
     */
    private lateinit var settingsClient : SettingsClient
    private lateinit var locationRequest: LocationRequest
    private lateinit var locationSettingsRequest: LocationSettingsRequest
    private lateinit var locationCallback: LocationCallback
    private var requestingLocationUpdates : Boolean = false







in onCreateMethod
/**initializing components for location updates
        requestingLocationUpdates = false
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        settingsClient = LocationServices.getSettingsClient(this)

        createLocationCallback()
        createLocationRequest()
        buildLocationSettingsRequest()
        */









/**
    override fun onResume() {
        super.onResume()
        if (requestingLocationUpdates) startLocationUpdates()
    }

    private fun startLocationUpdates() {
        fusedLocationClient.requestLocationUpdates(locationRequest,
            locationCallback,
            Looper.getMainLooper())
    }

    override fun onPause() {
        super.onPause()
        stopLocationUpdates()
    }

    private fun stopLocationUpdates() {
        fusedLocationClient.removeLocationUpdates(locationCallback)
    }


    private fun createLocationCallback() {
        locationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult?) {
                locationResult ?: return
                for (location in locationResult.locations){
                    // Update UI with location data
                    // ...
                    Snackbar.make(findViewById(R.id.material_card_address), ""+ location,Snackbar.LENGTH_SHORT).show()
                }
            }
        }
    }

    private fun createLocationRequest() {
        locationRequest = LocationRequest()
        locationRequest.interval = UPDATE_INTERVAL_IN_MILLISECONDS
        locationRequest.fastestInterval = FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS
        locationRequest.priority =LocationRequest.PRIORITY_HIGH_ACCURACY
    }

    private fun buildLocationSettingsRequest() {
        val builder =LocationSettingsRequest.Builder()
        builder.addLocationRequest(locationRequest)
        locationSettingsRequest = builder.build()
    }
*/