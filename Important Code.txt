// SafeArgs code
	//In Fragment 1
	binding.button.setOnClickListener {
            it.findNavController().navigate(FirstFragmentDirections.actionFirstFragmentToSecondFragment("Your argument has been passed!"))
        }
	// In Fragment 2
	var args = SecondFragmentArgs.fromBundle(arguments!!)
        Toast.makeText(context, args.message,Toast.LENGTH_LONG).show()



// DataBinding in Fragment
	val binding : FragmentFirstBinding = DataBindingUtil.inflate(inflater,R.layout.fragment_second,container,false)
	return binding.root




// DataBinding in Activity
	private lateinit var binding : ActivityMainBinding

	binding = DataBindingUtil.setContentView(this,R.layout.activity_main)


// setUpNavigation
	private lateinit var navController : NavController

	navController = Navigation.findNavController(this, R.id.myNavHostFragment)


// Navigate from menu to fragment
	R.id.aboutFragment -> {
                navController.navigate(R.id.aboutFragment)
                true}



//Navigate from Fragment to another Fragment
	it.findNavController().navigate(
                FirstFragmentDirections.actionFirstFragmentToSecondFragment())


// Navigate from Fragment to Activity (put an arrow from fragment to activity in navigation graph)
	binding.textView.setOnClickListener{
           it.findNavController().navigate(HomeFragmentDirections.actionHomeFragmentToMain2Activity())
        }

// Navigate from activity to another

binding.button.setOnClickListener {
            startActivity(Intent(this, Main2Activity::class.java))
        }



// Up button
	NavigationUI.setupActionBarWithNavController(this, navController)
	
	override fun onSupportNavigateUp(): Boolean {
        val navController = this.findNavController(R.id.myNavHostFragment)
        return navController.navigateUp()
    	}

// add color to navigation bar
	<item name="android:navigationBarColor">@color/primary_dark</item>



// Splash Activity
	// in styles
  		<style name="Fullscreen" parent="Theme.AppCompat.Light.DarkActionBar">
    		<item name="windowActionBar">false</item>
    		<item name="windowNoTitle">true</item>
    		<item name="android:windowFullscreen">true</item>
  		</style>
	// in splashActivity.kt
		class SplashActivity : AppCompatActivity() {
    		override fun onCreate(savedInstanceState: Bundle?) {
        	super.onCreate(savedInstanceState)
        	setContentView(R.layout.activity_splash)
        	thread {
            	Thread.sleep((3 * 1000).toLong())
            	startMainActivity()
        	}.priority = Thread.NORM_PRIORITY
    		}
    		private fun startMainActivity() {
        	val intent = Intent(applicationContext, MainActivity::class.java)
        	startActivity(intent)
        	finish()
    		}
		}
	// in manifest.xml
	<activity android:name=".SplashActivity"
        android:theme="@style/Fullscreen">
	 <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
         </intent-filter>
	


// Add snackbar
	Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG).setAction("Action", null).show()



//How to make recyclerview from database
	- create database and table and store data
	- create layout item (viewholder layout)
	- create item dataclass
	- create recyclerView in activity layout
	- add layout manager to recyclerView
	- create adapter for recyclerview
	-sync recyclerview to adpater in activity class
	- bindingUtils to add bindingAdapters
	-use bindingAdapters in layout item
	-binding.lifecycleOwner = this in activity class
	-To observe data
	sleepTrackerViewModel.nights.observe(viewLifecycleOwner, Observer {
            it?.let {
                adapter.submitList(it)
            }
        })




//Firestore RecyclerView
	- create layout item (viewholder layout)
	- create item dataclass
	- create recyclerView in activity layout
	- add layout manager to recyclerView
	- firestore collection path 
	- storage collection path
	- bindingUtils to add bindingAdapters
	-use bindingAdapters in layout item
	-binding.lifecycleOwner = this
	- create adapter for recyclerview
	-sync recyclerview to adpater in activity class
	- override fun onStart() {
        super.onStart()
        adapter.startListening()
    	}
    	-override fun onStop() {
        super.onStop()
        adapter.stopListening()
    	}

//Firestore to get fields value from firebase ref
              FirestoreUtil.firestoreInstance
              .document(""+args.ref)
              .get()
              .addOnSuccessListener {shopsNameText.text = it["shopName"].toString()}


//change color of some text in a textview

        val text = "Have an account? Login"
        val ss = SpannableString(text)
        val orangeLogin = ForegroundColorSpan(Color.parseColor("#0083b6"))
        ss.setSpan(orangeLogin, 17,22, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
        binding.loginButton.text = ss

    

//Handle the events of eddittext
 //Make button clickable once 8 number have been registered
        binding.phoneNumberLogin.addTextChangedListener(object: TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
            }
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
            }
            override fun afterTextChanged(s: Editable?){
                if(s.toString().length == 8) {
                    binding.login.setBackgroundColor(Color.parseColor("#0083b6"))
                    binding.login.setTextColor(Color.parseColor("#ffffff"))
                }
                else {
                    binding.login.setBackgroundColor(Color.parseColor("#FF7C7979"))
                    binding.login.setTextColor(Color.parseColor("#000000"))
                }

            }
        })